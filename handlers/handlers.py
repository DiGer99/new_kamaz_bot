from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
import database.requests as rq
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter
import logging
from keyboards.keyboards import create_inline_keyboard, create_reply_keyboard, head_reply_keyboard
from config.config import load_config
from fsm.fsm import AdminChangeSchedule
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import services.services as serv

handler_router = Router()

logger = logging.getLogger(__name__)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@handler_router.message(CommandStart())
async def process_press_start_command(message: Message, scheduler: AsyncIOScheduler, bot: Bot):
    await rq.set_user(tg_id=message.from_user.id, full_name=f"{message.from_user.first_name} {message.from_user.last_name}")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}!\n–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç '–§–ö –ö–∞–º–∞–∑'!!!\n\n"
                         f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –í—ã–±–µ—Ä–∏, —á—Ç–æ–±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å...",
                         reply_markup=head_reply_keyboard)
    if str(message.from_user.id) in load_config().admins.ids:
        try:
            await rq.get_schedule()
        except AttributeError:
            await rq.set_schedule()
    scheduler.add_job(bot.send_message, "cron", hour=21, args=(message.chat.id, ))


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /change_schedule –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdminChangeSchedule.wait_schedule
@handler_router.message(Command("change_schedule"))
async def change_schedule_admin_command_press(message: Message, state: FSMContext):
    config = load_config()
    admins_list = config.admins.ids
    if str(message.from_user.id) in admins_list:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        await state.set_state(AdminChangeSchedule.wait_schedule)
    

# –õ–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdminChangeSchedule.wait_schedule –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
@handler_router.message(StateFilter(AdminChangeSchedule.wait_schedule))
async def change_schedule_process(message: Message, state: FSMContext):
    await rq.update_schedule(schedule=message.text)
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@handler_router.message(Command("help"))
async def process_help_command_press(message: Message):
    await message.answer(text="–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É...",
                         reply_markup=head_reply_keyboard)
    

# –õ–æ–≤–∏–º –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" –∏ –≤—ã–≤–æ–¥–∏–º "full_schedule" —á–µ—Ä–µ–∑ requests
@handler_router.message(F.text == "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def process_schedule_week_button_press(message: Message):
    await message.answer(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n")
    text = await rq.get_schedule()
    await message.answer(text=text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è" 
@handler_router.message(F.text == "üîñ –°–µ–≥–æ–¥–Ω—è")
async def process_button_today_press(message: Message):
    await message.answer(text=await serv.today_press_button())
    # today_date = datetime.now() # –ø–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É 
    # now_day_month = today_date.strftime("%d.%m") # –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç 01.12 - –¥–µ–Ω—å –º–µ—Å—è—Ü
    # if now_day_month.startswith("0"): # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "0" —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    #     now_day_month.removeprefix("0")
    # schedule = str(await rq.get_schedule()).split("\n\n") # —Ä–∞–∑–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–≤—É–º –ø–µ—Ä–µ–≤–æ–¥–∞–º —Å—Ç—Ä–æ–∫–∏
    # today_schedule = None
    # for i in schedule: # –ø—Ä–æ–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–º –ø–æ –¥–∞—Ç–∞–º, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "today_schedule"
    #     if i.strip().startswith(now_day_month):
    #         today_schedule = i
    #         break
    # if today_schedule:
    #     await message.answer(text=today_schedule)
    # else:
    #     await message.answer(text="–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤—Ç—Ä–∞"
@handler_router.message(F.text == "üîú –ó–∞–≤—Ç—Ä–∞")
async def process_button_press_tommorow(message: Message):
    await message.answer(text=await serv.tommorow_press_button())


# –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ \n\n –∏ –ø–æ—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–Ω–æ–ø–∫–∏
@handler_router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–∞–º")
async def process_button_schedule_dates_press(message: Message):
    schedule = str(await rq.get_schedule())
    dates = []
    dates = [i.strip().split("\n", 1)[0] for i in schedule.split("\n\n")]
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É...",
                         reply_markup=create_inline_keyboard(3, *dates))
    

# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –Ω–∞ –¥–∞—Ç—É
@handler_router.callback_query(F.data.replace(".", '').isdigit())
async def process_callback_button_date_press(calback: CallbackQuery):
    schedule = await rq.get_schedule()
    await calback.message.answer(text=[i for i in schedule.split("\n\n") if i.strip().startswith(calback.data)][0])
    await calback.answer()