from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
import database.requests as rq
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter, or_f
import logging
from keyboards.keyboards import create_inline_keyboard, create_reply_keyboard, head_reply_keyboard
from config.config import load_config
from fsm.fsm import AdminChangeSchedule, AdminNewsLetter
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import services.services as serv
from aiogram.exceptions import TelegramBadRequest

handler_router = Router()

logger = logging.getLogger(__name__)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö schedule —Å id = 1 - –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@handler_router.message(CommandStart())
async def process_press_start_command(message: Message, scheduler: AsyncIOScheduler, bot: Bot):
    await rq.set_user(tg_id=message.from_user.id, full_name=f"{message.from_user.first_name} {message.from_user.last_name}")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}!\n–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç <b>–§–ö –ö–∞–º–∞–∑!!</b>\n\n"
                         f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –í—ã–±–µ—Ä–∏, —á—Ç–æ–±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å...",
                         reply_markup=head_reply_keyboard)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /change_schedule –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdminChangeSchedule.wait_schedule
@handler_router.message(Command("change_schedule"))
async def change_schedule_admin_command_press(message: Message, state: FSMContext):
    config = load_config()
    admins_list = config.admins.ids
    if str(message.from_user.id) in admins_list:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...",
                             reply_markup=create_inline_keyboard(1, cancel="–û—Ç–º–µ–Ω–∞"))
        await state.set_state(AdminChangeSchedule.wait_schedule)
    else:
        await message.answer(text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞...")


# –õ–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –∫–æ–ª–±—ç–∫ –¥–∞—Ç—É –æ—Ç–º–µ–Ω–∞ - cancel
@handler_router.callback_query(or_f(StateFilter(AdminChangeSchedule.wait_schedule), StateFilter(AdminNewsLetter.wait_newsletter)), (F.data == "cancel"), )
async def process_cancell_inline_button_press_changed_schedule(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ")


# –õ–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdminChangeSchedule.wait_schedule –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
@handler_router.message(StateFilter(AdminChangeSchedule.wait_schedule))
async def change_schedule_process(message: Message, state: FSMContext):
    await rq.update_schedule(schedule=message.text)
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@handler_router.message(Command("help"))
async def process_help_command_press(message: Message):
    if str(message.from_user.id) in load_config().admins.ids:
        await message.answer(text="–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/change_schedule\n\n"
                            "–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/newsletter\n\n"
                            "–î–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n/all_users",
                             reply_markup=head_reply_keyboard)
    else:    
        await message.answer(text="–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É...",
                            reply_markup=head_reply_keyboard)
        

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã all_users –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@handler_router.message(Command("all_users"))
async def process_all_users_button_press(message: Message):
    if str(message.from_user.id) in load_config().admins.ids:
        empty_str = ""
        list_users = await rq.newslatter()
        for i in list_users:
            empty_str += f"<b>–¢–µ–ª–µ–≥—Ä–∞–º id</b>: <code>{i.tg_id}</code>, <b>–∏–º—è</b>: {i.name}\n\n"
        await message.answer(text=empty_str)
    else:
        await message.answer(text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞...")
    


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /newsletter
@handler_router.message(Command("newsletter"))
async def process_command_neswletter_press(message: Message, state: FSMContext):
    if str(message.from_user.id) in load_config().admins.ids:
        await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...", reply_markup=create_inline_keyboard(1, cancel="–û—Ç–º–µ–Ω–∞"))
        await state.set_state(AdminNewsLetter.wait_newsletter)
    else:
        await message.answer(text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞...")
    


# –≤—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@handler_router.message(AdminNewsLetter.wait_newsletter)
async def newsletter_process(message: Message, bot: Bot, state: FSMContext):
    lst_users = await rq.newslatter()
    try:
        for i in lst_users:
            await bot.send_message(chat_id=i.tg_id, text=message.text)
    except TelegramBadRequest:
        pass

    await state.clear()
    await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...")


# –õ–æ–≤–∏–º –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" –∏ –≤—ã–≤–æ–¥–∏–º "full_schedule" —á–µ—Ä–µ–∑ requests
@handler_router.message(F.text == "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def process_schedule_week_button_press(message: Message):
    full_schedule = str(await rq.get_schedule())
    lst_schedule_dates = full_schedule.split("\n\n")
    lst_schedule_dates = "\n\n".join(serv.add_html(lst_schedule=lst_schedule_dates))
    await message.answer(text=f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n{lst_schedule_dates}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è" 
@handler_router.message(F.text == "üîñ –°–µ–≥–æ–¥–Ω—è")
async def process_button_today_press(message: Message):
    await message.answer(text=f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{await serv.today_press_button()}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤—Ç—Ä–∞"
@handler_router.message(F.text == "üîú –ó–∞–≤—Ç—Ä–∞")
async def process_button_press_tommorow(message: Message):
    await message.answer(text=f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{await serv.tommorow_press_button()}")


# –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ \n\n –∏ –ø–æ—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–Ω–æ–ø–∫–∏ 
@handler_router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–∞–º")
async def process_button_schedule_dates_press(message: Message):
    schedule = str(await rq.get_schedule())
    dates = [i.split("\n", 1)[0] for i in schedule.split("\n\n")]
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É...",
                         reply_markup=create_inline_keyboard(3, *dates))
    

# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –Ω–∞ –¥–∞—Ç—É
@handler_router.callback_query(F.data.replace(".", "").replace(" ", "").isdigit())
async def process_callback_button_date_press(calback: CallbackQuery):
    schedule = await rq.get_schedule() # –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_date = next(i for i in schedule.split("\n\n") if i.strip().startswith(calback.data)) # –Ω—É–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ –¥–∞—Ç–µ
    if schedule_date:
        schedule_html = schedule_date.split("\n", 1)
        schedule_html[0] = "<u><i>" + schedule_html[0].strip() + "</i></u>"
        schedule_date = "\n".join(schedule_html)
    await calback.message.edit_text(text=schedule_date) 
    await calback.answer()